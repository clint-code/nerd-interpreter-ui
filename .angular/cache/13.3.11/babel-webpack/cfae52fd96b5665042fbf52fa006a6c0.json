{"ast":null,"code":"import { __decorate, __metadata, __param } from 'tslib';\nimport { EventEmitter, Input, Output, Component, Inject, PLATFORM_ID, ElementRef, Directive, forwardRef, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"ngx-masonry\", \"\"];\nconst _c1 = [\"*\"];\nlet imagesLoaded;\nlet masonryConstructor;\nlet NgxMasonryComponent = /*#__PURE__*/(() => {\n  let NgxMasonryComponent = class NgxMasonryComponent {\n    constructor(platformId, _element) {\n      this.platformId = platformId;\n      this._element = _element;\n      this.useImagesLoaded = false;\n      this.updateLayout = false; // Outputs\n\n      this.layoutComplete = new EventEmitter();\n      this.removeComplete = new EventEmitter();\n    }\n\n    ngOnInit() {\n      if (this.useImagesLoaded && imagesLoaded === undefined) {\n        imagesLoaded = require('imagesloaded');\n      }\n\n      if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n        masonryConstructor = require('masonry-layout');\n      } // Create masonry options object\n\n\n      if (!this.options) {\n        this.options = {};\n      } // Set default itemSelector\n\n\n      if (!this.options.itemSelector) {\n        this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n      }\n\n      if (isPlatformBrowser(this.platformId)) {\n        // Initialize Masonry\n        this._msnry = new masonryConstructor(this._element.nativeElement, this.options); // Bind to events\n\n        this._msnry.on('layoutComplete', items => {\n          this.layoutComplete.emit(items);\n        });\n\n        this._msnry.on('removeComplete', items => {\n          this.removeComplete.emit(items);\n        });\n      }\n    }\n\n    ngOnChanges(changes) {\n      // only update layout if it's not the first change\n      if (changes.updateLayout) {\n        if (!changes.updateLayout.firstChange) {\n          this.layout();\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      if (this._msnry) {\n        this._msnry.destroy();\n      }\n    }\n\n    layout() {\n      setTimeout(() => {\n        this._msnry.layout();\n      });\n    }\n\n    reloadItems() {\n      setTimeout(() => {\n        this._msnry.reloadItems();\n      });\n    } // public add(element: HTMLElement, prepend: boolean = false) {\n\n\n    add(element) {\n      let isFirstItem = false; // Check if first item\n\n      if (this._msnry.items.length === 0) {\n        isFirstItem = true;\n      }\n\n      if (this.useImagesLoaded) {\n        imagesLoaded(element, instance => {\n          this._element.nativeElement.appendChild(element); // Tell Masonry that a child element has been added\n\n\n          this._msnry.appended(element); // layout if first item\n\n\n          if (isFirstItem) {\n            this.layout();\n          }\n        });\n\n        this._element.nativeElement.removeChild(element);\n      } else {\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element); // layout if first item\n\n\n        if (isFirstItem) {\n          this.layout();\n        }\n      }\n    }\n\n    remove(element) {\n      // Tell Masonry that a child element has been removed\n      this._msnry.remove(element); // Layout items\n\n\n      this.layout();\n    }\n\n  };\n\n  NgxMasonryComponent.ɵfac = function NgxMasonryComponent_Factory(t) {\n    return new (t || NgxMasonryComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NgxMasonryComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxMasonryComponent,\n    selectors: [[\"\", \"ngx-masonry\", \"\"], [\"ngx-masonry\"]],\n    inputs: {\n      useImagesLoaded: \"useImagesLoaded\",\n      updateLayout: \"updateLayout\",\n      options: \"options\"\n    },\n    outputs: {\n      layoutComplete: \"layoutComplete\",\n      removeComplete: \"removeComplete\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function NgxMasonryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\"]\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Object)], NgxMasonryComponent.prototype, \"options\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean)], NgxMasonryComponent.prototype, \"useImagesLoaded\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean)], NgxMasonryComponent.prototype, \"updateLayout\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], NgxMasonryComponent.prototype, \"layoutComplete\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], NgxMasonryComponent.prototype, \"removeComplete\", void 0);\n\n  NgxMasonryComponent = __decorate([__param(0, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [Object, ElementRef])], NgxMasonryComponent);\n  return NgxMasonryComponent;\n})();\nlet NgxMasonryDirective = /*#__PURE__*/(() => {\n  let NgxMasonryDirective = class NgxMasonryDirective {\n    constructor(_element, _parent, platformId) {\n      this._element = _element;\n      this._parent = _parent;\n      this.platformId = platformId;\n    }\n\n    ngAfterViewInit() {\n      if (isPlatformBrowser(this.platformId)) {\n        this._parent.add(this._element.nativeElement);\n\n        this.watchForHtmlChanges();\n      }\n    }\n\n    ngOnDestroy() {\n      if (isPlatformBrowser(this.platformId)) {\n        this._parent.remove(this._element.nativeElement);\n      }\n    }\n    /** When HTML in brick changes dinamically, observe that and change layout */\n\n\n    watchForHtmlChanges() {\n      MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n      if (MutationObserver) {\n        /** Watch for any changes to subtree */\n        const self = this;\n        const observer = new MutationObserver(function (mutations, observerFromElement) {\n          self._parent.layout();\n        }); // define what element should be observed by the observer\n        // and what types of mutations trigger the callback\n\n        observer.observe(this._element.nativeElement, {\n          subtree: true,\n          childList: true\n        });\n      }\n    }\n\n  };\n\n  NgxMasonryDirective.ɵfac = function NgxMasonryDirective_Factory(t) {\n    return new (t || NgxMasonryDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => NgxMasonryComponent)), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  NgxMasonryDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxMasonryDirective,\n    selectors: [[\"\", \"ngxMasonryItem\", \"\"], [\"ngxMasonryItem\"]]\n  });\n  NgxMasonryDirective = __decorate([__param(1, Inject(forwardRef(() => NgxMasonryComponent))), __param(2, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgxMasonryComponent, Object])], NgxMasonryDirective);\n  return NgxMasonryDirective;\n})();\nlet NgxMasonryModule = /*#__PURE__*/(() => {\n  let NgxMasonryModule = class NgxMasonryModule {};\n\n  NgxMasonryModule.ɵfac = function NgxMasonryModule_Factory(t) {\n    return new (t || NgxMasonryModule)();\n  };\n\n  NgxMasonryModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxMasonryModule\n  });\n  NgxMasonryModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return NgxMasonryModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMasonryModule, {\n    declarations: [NgxMasonryComponent, NgxMasonryDirective],\n    exports: [NgxMasonryComponent, NgxMasonryDirective]\n  });\n})();\n\nexport { NgxMasonryComponent, NgxMasonryDirective, NgxMasonryModule }; //# sourceMappingURL=ngx-masonry.js.map","map":null,"metadata":{},"sourceType":"module"}